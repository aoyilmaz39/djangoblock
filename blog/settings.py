"""
Django settings for blog project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-y%t71_!kk&4td8eid%$6w@9i#$3+tzdyn4$k=jgy+n(112!65s'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',#Burada django nun admin paneliyle ilgili hazır uygulaması olduğunu görüyoruz.
    'django.contrib.auth',
    'django.contrib.contenttypes',#Bu uygulamaların içinde Database imizde oluşması gereken tablolar var
    'django.contrib.sessions',#bu tabloları direk terminamilize konum-->python manage.py migrate yazarak oluşturabiliyoruz.
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'article',#yazdığımız uygulamamızı buraya tanıttık 'article'
    'user',
    'crispy_forms',
    'ckeditor',
    'django_cleanup',#Bu uygulama sayesinde bizim bir makalemizi sildiğimizde makalemizdeki resim dosyalarımızda silinmesini sağlayacaktır.

]#Bizde yazdığımız uygulamaları buraya girmemiz gerekiyor.

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ["templates"],#Kendi templates klasörümüzü oluşturmamız gerekiyor.
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',# Bunu addrticle.html de formumuzu upload edrken ancak başka bir dosyada bu image ı göstermemiz gerekiyor bu yüzden.
            ],
        },
    },
]

WSGI_APPLICATION = 'blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'tr'#en-us ingilizce

TIME_ZONE = 'UTC'#İstediğimiz bölgeye göre saat dilimini alabilir.

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'
#

STATICFILES_DIRS = [
    BASE_DIR / "static",

]
STATIC_ROOT = os.path.join(BASE_DIR, "mediafiles")#Burada django biz projemizi bir servere attığımız zaman js ve css dosyalarının dağınıklığını önlemek için
                           #bu dosyaların tek bir klasörde toplanmasını sağlamak için bu static root değişkeninin tanımlamamıza olanak sağlıyor.

# Base_dır altında staticfile diye bir doya oluşmuş olucak ve pythonda (python manage.py collectstatic) collectstatic şeklinde bir komut çalıştırarak bu dosyaları toparlamasını sağlıyoruz.

CRISPY_TEMPLATE_PACK = 'bootstrap4'
#

CKEDITOR_CONFIGS = {# Bu dökümanlarla ck editöre <pre class="prettyprint">...</pre> şeklinde yazacağımız makalemizde kodları belirmek için kullandığımız sınıf sorunsuz çalışacaktır.
    "default":{
        "removePlugins": "stylesheetparser",
        "allowedContent" : True,
        "width" : "%100",

    }
}

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


